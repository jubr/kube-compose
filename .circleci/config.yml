# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  go: circleci/go@1.7.3
  golangci-lint: timakin/golangci-lint@0.1.1

jobs:
  build_and_test: # this can be any name you choose
    executor:
      name: go/default # Use the default executor from the orb
      tag: '1.12' # Specify a version tag
    steps:
      - checkout # checkout source code
      - go/load-cache # Load cached Go modules.
      #- go/mod-download # Run 'go mod download'.
      - go/save-cache # Save Go modules to cache.
      - run:
          name: "Build Linux + darwin" 
          command: |
            export CGO_ENABLED=0
            export GOOS
            mkdir artifacts
            for T in linux darwin; do
              mkdir -p release/"$T"
              GOOS=$T
              go build -a -installsuffix cgo -o release/"$T"/kube-compose .
              (
                cd release/"$T"
                tar -zcvf kube-compose.tar.gz kube-compose
                mv kube-compose ../../artifacts/kube-compose."$T"
                mv kube-compose.tar.gz ../../artifacts/kube-compose."$T".tar.gz
              )
            done
            ls -la artifacts/
      - persist_to_workspace:
          root: .
          paths: artifacts
  deploy:
    executor:
      name: go/default # Use the default executor from the orb
      tag: '1.18'
    steps:
      - attach_workspace:
          at: /tmp/workspace 
      - run:
          name: "Publish Release on GitHub"
          command: |
            set -x
            ls -la /tmp/workspace/artifacts/ 
            export GOPROXY=https://proxy.golang.org 
            go install github.com/tcnksm/ghr@latest
            VERSION=v0.0.1
            echo CIRCLE_TAG=${CIRCLE_TAG}
            ghr -t ${GITHUB_TOKEN} \
                -u ${CIRCLE_PROJECT_USERNAME} \
                -r ${CIRCLE_PROJECT_REPONAME} \
                -c ${CIRCLE_SHA1} \
                -delete ${VERSION} \
                /tmp/workspace/artifacts/ 
  lint:
    executor:
      name: go/default
      tag: '1.12'
    steps:
      - checkout
      - run:
          name: "golangci-lint"
          command: |
            # binary will be $(go env GOPATH)/bin/golangci-lint
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
            golangci-lint --version
            export CGO_ENABLED=0
            export GOOS
            export GOPROXY=https://proxy.golang.org
            # https://golangci-lint.run/usage/quick-start 
            golangci-lint run -D wrapchwck

  test:
    executor:
      name: go/default
      tag: '1.18'
    steps:
      - checkout
      - go/load-cache
      - run:
          name: "get goveralls"
          command: | 
            go get github.com/mattn/goveralls
            go get golang.org/x/crypto/ssh/terminal@v0.0.0-20210921155107-089bfa567519 
      - go/test: # Runs 'go test ./...' but includes extensive parameterization for finer tuning.
          covermode: atomic
          failfast: true
          race: true

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  go-with-the-flow:
    jobs:
      - build_and_test
      - test
      - lint
      - golangci-lint/lint
      - deploy:
          requires:
            - build_and_test
