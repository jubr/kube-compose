# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  go: circleci/go@1.9.0
  golangci-lint: timakin/golangci-lint@0.1.1
  gh: circleci/github-cli@2.2.0
  slack: circleci/slack@4.12.5

########
commands:

  enhance-env:
    parameters:
      from-workflow: { type: string, default: unknown }
    steps:
      - run:
          name: "Enhance env (<<parameters.from-workflow>>)"
          command: |
            set -x
            ls -l /tmp/workspace/
            if [ ! -f /tmp/workspace/env ]; then
              # v0.0.4-42-gdeadbeef long based off last clean tag - or clean tag
              D="$(git describe --tags --match 'v*' --exclude 'v*-*')"
              # Prep PRETAG like 'v0.0.4-42'
              PRETAG="$(echo "${D}" | sed -r -e 's/(.+)-(.+)-(.+)/\1-\2/')"
              # Find LAST_CLEAN_TAG looking like 'v0.0.4'
              LAST_CLEAN_TAG="$(git describe --tags --match 'v*' --exclude 'v*-*' --abbrev=0)"
              RE='^main|master$'
              if [[ "${CIRCLE_BRANCH}" =~ $RE ]]; then
                if [ "<<parameters.from-workflow>>" = "main-build-test-release" ]; then
                  # Here we've passed test+lint, so:
                  # Increment version
                  MAJOR=$(echo ${LAST_CLEAN_TAG//v/} | awk -F "." '{print $1}')
                  MINOR=$(echo ${LAST_CLEAN_TAG//v/} | awk -F "." '{print $2}')
                  PATCH=$(echo ${LAST_CLEAN_TAG//v/} | awk -F "." '{print $3}')
                  #if [ "$BRANCH_NAME" == "feature.*" ]; then
                  #  PRETAG="v$MAJOR.$(($MINOR + 1)).0"
                  #else
                    PRETAG="v$MAJOR.$MINOR.$(($PATCH + 1))"
                  #fi
                  PRERELEASE=false
                else
                  # Prerelease on branch 'main'? (can this happen?)
                  PRERELEASE=true
                fi
              else
                CLEAN_BRANCH="${CIRCLE_BRANCH/jubr-/}"
                # dependabot/go_modules/github.com/spf13/cobra-1.8.0 -> cobra-1.8.0
                CLEAN_BRANCH="${CLEAN_BRANCH/*\//}"
                # remove special chars
                CLEAN_BRANCH=$(echo "${CLEAN_BRANCH}" | tr -c -d 'a-z0-9_~.-')
                # Append branch if not main: PRETAG like 'v0.0.4-42-registry-auth'
                PRETAG="${PRETAG}-${CLEAN_BRANCH}"
                PRERELEASE=true
              fi
              # TAG is v0.0.4 or v0.0.4-42 or v0.0.4-42-registry-auth
              echo "TAG='${PRETAG}'"                                                   > /tmp/workspace/env
              # Prep VERSION like '0.6.3+v0.0.4-42' - on top of the original author's version
              echo "VERSION='0.6.3+${PRETAG}'"                                        >> /tmp/workspace/env
              echo "PRERELEASE=$PRERELEASE"                                           >> /tmp/workspace/env
              echo "PRERELEASE_OPT=$( $PRERELEASE && echo '-prerelease' || echo '' )" >> /tmp/workspace/env
              echo "CIRCLE_PROJECT_REPONAME=kube-compose"                             >> /tmp/workspace/env
              echo "CIRCLE_PROJECT_USERNAME=jubr"                                     >> /tmp/workspace/env
              echo "CIRCLE_REPOSITORY_URL=https://github.com/jubr/kube-compose"       >> /tmp/workspace/env
              echo "RELEASE_FILES='" /tmp/workspace/release/* "'"                     >> /tmp/workspace/env
            fi
            cat /tmp/workspace/env >> $BASH_ENV
            source /tmp/workspace/env

  versionize-source:
    steps:
      - run:
          name: "Versionize"
          command: |
            set -x
            source /tmp/workspace/env
            sed -i.orig cmd/root.go -r -e 's/(Version:\s+)".+"/\1"'${VERSION}'"/'
            diff -u --color=always cmd/root.go{.orig,} || :
            go mod download golang.org/x/sys || :

  build-one:
    parameters:
      GOOS:   { type: string }
      GOARCH: { type: string }
    steps:
      - run:
          name: "Build <<parameters.GOOS>> <<parameters.GOARCH>>"
          environment:
            GOOS: <<parameters.GOOS>>
            GOARCH: <<parameters.GOARCH>>
            GZIP_OPT: -9
          command: |
            set -x
            mkdir -p release
            R=${GOOS}_${GOARCH}
            git -c color.ui=always diff || :
            go build -a -o release/kube-compose.${R} .
            if [ ${GOOS} = windows ]; then
              # -move -junk paths
              zip -9 -m -j release/kube-compose.${R}.zip release/kube-compose.${R}
            else
              tar --remove-files -zcf release/kube-compose.${R}.tar.gz -C release/ kube-compose.${R}
            fi

####
jobs:

  build-job:
    executor:
      name: go/default
      tag: '1.21'
    parameters:
      from-workflow: { type: string }
    steps:
      - checkout
      - attach_workspace: { at: /tmp/workspace }
      - enhance-env:
          from-workflow: <<parameters.from-workflow>>
      - versionize-source
      - go/load-cache # Load cached Go modules.
      #- go/mod-download # Run 'go mod download'.
      - build-one: { GOOS: linux,  GOARCH: amd64 }
      - build-one: { GOOS: linux,  GOARCH: arm64 }
      - build-one: { GOOS: darwin, GOARCH: amd64 }
      - build-one: { GOOS: darwin, GOARCH: arm64 }
      - build-one: { GOOS: windows, GOARCH: amd64 }
      - run:
          command: |
            set -x
            du -h release/*
      - go/save-cache
      - persist_to_workspace:
          root: .
          paths: release
      - persist_to_workspace:
          root: /tmp/workspace
          paths: env

  publish-job:
    executor:
      name: go/default # Use the default executor from the orb
      tag: '1.21'
    steps:
      - attach_workspace: { at: /tmp/workspace }
      - enhance-env
      - run:
          name: "Publish Release on GitHub"
          command: |
            set -x
            du -h /tmp/workspace/release/*
            curl -L "https://github.com/tcnksm/ghr/releases/download/v0.16.1/ghr_v0.16.1_linux_amd64.tar.gz" \
              | tar -zvx
            mv -v ghr_*/ghr ghr
            chmod a+x ghr
            ./ghr --version
            source /tmp/workspace/env
            echo CIRCLE_TAG=${CIRCLE_TAG}
            ./ghr -t ${GITHUB_TOKEN} \
                -u jubr \
                -r kube-compose \
                -c ${CIRCLE_SHA1} \
                -n "${VERSION}" \
                -recreate \
                -replace \
                ${PRERELEASE_OPT} \
                -generatenotes \
                ${TAG} \
                /tmp/workspace/release/
      # See https://circleci.com/developer/orbs/orb/circleci/slack for docs
      - slack/notify:
          channel: C068PQGHUHX
          event: pass
          template: success_tagged_deploy_1

  test-job:
    executor:
      name: go/default
      tag: '1.21'
    steps:
      - checkout
      - go/load-cache
      - run:
          name: "get goveralls"
          command: |
            set -ux
            go get     github.com/mattn/goveralls
            go install github.com/mattn/goveralls
            go get golang.org/x/crypto/ssh/terminal@v0.0.0-20210921155107-089bfa567519
      # https://circleci.com/developer/orbs/orb/circleci/go
      - go/test: # Runs 'go test ./...' but includes extensive parameterization for finer tuning.
          covermode: atomic
          failfast: true
          race: true
          coverprofile: coverage.txt
          packages: ./...
      - run:
          name: "run goveralls"
          command: |
            set -ux
            $GOPATH/bin/goveralls -coverprofile=coverage.txt -service=circle-ci
      - store_test_results:
          path: ./

  lint-job:
    description: Lint the Go project with golangci-lint
    executor:
      name: golangci-lint/golangci
      tag: latest
    resource_class: medium
    steps:
    - checkout
    - attach_workspace: { at: /tmp/workspace }
    - enhance-env
    - versionize-source
    - golangci-lint/lint:
        checkout: false
        directories: "./... --timeout=30m -D wrapcheck || : # ignore linting failures while working on fixing them"
        working-directory: .


#########
workflows:

  new-branch-build-prerelease:
    jobs:
      - build-job:
          filters: &branch-filters
            branches: { only: [ /^dependabot.*/, /^jubr-.*/ ] }
          from-workflow: new-branch-build-prerelease
          name: build-j0b # change name from the 'other' parametrized 'build-job', to prevent 'build-job-1' -- see https://discuss.circleci.com/t/getting-number-suffix-appended-to-job-names-when-converting-to-2-1-config/28912/17
      - test-job:
          filters: *branch-filters
          #requires: [ build-j0b ]
      - lint-job:
          filters: *branch-filters
      - publish-job:
          filters: *branch-filters
          requires: [ build-j0b ]
          context: [ slack-secrets ]

  main-build-test-release:
    jobs:
      - test-job:
          filters: &main-filters
            branches: { only: [ master, main ] }
      - lint-job:
          filters: *main-filters
      - build-job:
          filters: *main-filters
          requires: [ test-job, lint-job ]
          from-workflow: main-build-test-release
      - publish-job:
          filters: *main-filters
          requires: [ build-job ]
          context: [ slack-secrets ]
#      - gh/release:
#          filters:
#            branches:
#              only:
#                - no-master
#                - no-main
#          requires:
#            - build-job
#            #- test
#          pre-steps:
#            #- checkout
#            - attach_workspace: { at: /tmp/workspace } # for release binaries
#            - enhance-env
#            - run:
#                name: "Delete $VERSION release"
#                command: |
#                  set -x
#                  rm -rvf * .[a-z]
#                  ls -la
#                  gh release delete \
#                      "$VERSION" \
#                      --yes \
#                      --cleanup-tag \
#                      --repo "${CIRCLE_REPOSITORY_URL}"
#                  set +x
#          version: 2.36.0
#          prerelease: true
#          #notes-file: changelog.md
#          tag: v0.0.4
#          title: v0.0.4 Toddler steps
#          #broken files:
#          #files: /tmp/workspace/release/kube-compose.linux_amd64 #${RELEASE_FILES}
#          additional_args: |
#            /tmp/workspace/release/kube-compose.linux_amd64.tar.gz \
#            /tmp/workspace/release/kube-compose.linux_arm64.tar.gz \
#            /tmp/workspace/release/kube-compose.darwin_amd64.tar.gz \
#            /tmp/workspace/release/kube-compose.darwin_arm64.tar.gz \
#            /tmp/workspace/release/kube-compose.windows_amd64.zip
#            --generate-notes
